#!/usr/local/bin/python
# -*- coding: utf-8 -*-
"""This file is part of the Chinise project.

http://code.google.com/p/chinise/
"""

__author__ = 'Emanuele Bertoldi <emanuele.bertoldi@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Emanuele Bertoldi'
__version__ = '0.0.1'

def md5_checksum(filepath):
    import hashlib
    fh = open(filepath, 'rb')
    m = hashlib.md5()
    while True:
        data = fh.read(8192)
        if not data:
            break
        m.update(data)
    return m.hexdigest()

def get_dictionary():
    module = None
    data_path = "data/cedict_ts.u8"
    data_hash = md5_checksum(data_path)

    try:
        import cedict
        module = cedict

        if module.HASH != data_hash:
            raise ImportError

    except:
        import re

        dict_path = "cedict.py"
        dict_buff = {}

        # Header.
        dict_file = open(dict_path, "w")
        dict_file.write("#!/usr/local/bin/python\n")
        dict_file.write("# -*- coding: utf-8 -*-\n")
        dict_file.write("\"\"\"This file is auto-generated by Chinise software from CC-CEDICT dictionary.\n")
        dict_file.write("\n")
        dict_file.write("http://code.google.com/p/chinise/\n")
        dict_file.write("\n")
        dict_file.write("Copyright (C) 2012 Emanuele Bertoldi\n")
        dict_file.write("\"\"\"\n")
        dict_file.write("# CC-CEDICT\n")
        dict_file.write("# Community maintained free Chinese-English dictionary.\n")
        dict_file.write("# \n")
        dict_file.write("# Published by MDBG\n")
        dict_file.write("# \n")
        dict_file.write("# License:\n")
        dict_file.write("# Creative Commons Attribution-Share Alike 3.0\n")
        dict_file.write("# http://creativecommons.org/licenses/by-sa/3.0/\n")
        dict_file.write("# \n")
        dict_file.write("# Referenced works:\n")
        dict_file.write("# CEDICT - Copyright (C) 1997, 1998 Paul Andrew Denisowski\n")
        dict_file.write("# \n")
        dict_file.write("# CC-CEDICT can be downloaded from:\n")
        dict_file.write("# http://www.mdbg.net/chindict/chindict.php?page=cc-cedict\n")
        dict_file.write("# \n")
        dict_file.write("# Additions and corrections can be sent through:\n")
        dict_file.write("# http://cc-cedict.org/editor/editor.php\n")
        dict_file.write("# \n")
        dict_file.write("# For more information about CC-CEDICT see:\n")
        dict_file.write("# http://cc-cedict.org/wiki/\n")
        dict_file.write("HASH = \"%s\"\n" % data_hash)
        dict_file.write("DICT = {\n")

        # Body.
        for line in open(data_path):
            if line[0] == '#':
                continue

            r = re.search('^\s*(.+)\s+(.+)\s+\[(.+)\]\s+\/(.+)\/\s*$', line)
            k1 = r.group(1)
            k2 = r.group(2)
            p = r.group(3).replace(" ", "").replace("'", "\'").replace('\"', '\\"')
            m = r.group(4).replace("'", "\'").replace('\"', '\\"')

            if not dict_buff.has_key(k1):
                dict_file.write("\t\"%s\": (\"%s\", \"%s\"),\n" % (k1, p, m))
                dict_buff[k1] = (p, m)

            if not dict_buff.has_key(k2):
                dict_file.write("\t\"%s\": (\"%s\", \"%s\"),\n" % (k2, p, m))
                dict_buff[k2] = (p, m)

        # Footer.
        dict_file.write("}\n")
        dict_file.close()

        import cedict
        module = cedict

    return module.DICT

def pinyinize(text):
    """Return pinyin reading of a string of traditional or simplified Hanzi.

    ex:
        >>> pinyinize("朋友们好")
        ['peng2you5', 'men5', 'hao4']
    """
    output = []

    dictionary = get_dictionary()
    buff = text

    while len(buff) > 0:
        found = False
        buff2 = buff
        while len(buff2) > 0:
            if dictionary.has_key(buff2):
                output.append(dictionary[buff2][0])
                buff = buff[len(buff2):]
                found = True
                buff2 = ""
            else:
                buff2 = buff2[:-1]
        if not found and buff:
            output.append("")
            buff = buff[1:]
             
    return output
